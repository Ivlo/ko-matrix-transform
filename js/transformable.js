// Generated by CoffeeScript 1.3.3
(function() {
  var Transformable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Transformable = (function() {

    function Transformable(transformable) {
      this.on_rotate = __bind(this.on_rotate, this);

      this.on_translate = __bind(this.on_translate, this);
      this.matrix = $M([[1, 0, 0], [0, 1, 0], [0, 0, 1]]);
      this.transformable = transformable;
      this.translate_x = ko.observable(0);
      this.translate_y = ko.observable(0);
      this.rotation = ko.observable(0);
    }

    Transformable.prototype.render = function() {
      return this.transformable.css("-webkit-transform", "matrix(" + (this.css_matrix()) + ")");
    };

    Transformable.prototype.on_translate = function() {
      this.translate(parseInt(this.translate_x(), 10), parseInt(this.translate_y(), 10));
      this.translate_x(0);
      return this.translate_y(0);
    };

    Transformable.prototype.on_rotate = function() {
      this.rotate(parseInt(this.rotation(), 10));
      return this.rotation(0);
    };

    Transformable.prototype.rotate = function(deg) {
      var cos, sin;
      cos = Math.round(Math.cos(deg * Math.PI / 180) * 100) / 100;
      sin = Math.round(Math.sin(deg * Math.PI / 180) * 100) / 100;
      this.matrix = this.matrix.x($M([[cos, sin, 0], [-sin, cos, 0], [0, 0, 1]]));
      return this.render();
    };

    Transformable.prototype.translate = function(x, y) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      this.matrix = this.matrix.add($M([[0, 0, x], [0, 0, y], [0, 0, 0]]));
      return this.render();
    };

    Transformable.prototype.css_matrix = function() {
      var row_1, row_2;
      row_1 = this.matrix.row(1);
      row_2 = this.matrix.row(2);
      return "" + (row_1.e(1)) + ", " + (row_2.e(1)) + ", " + (row_1.e(2)) + ", " + (row_2.e(2)) + ", " + (row_1.e(3)) + ", " + (row_2.e(3));
    };

    return Transformable;

  })();

  ko.applyBindings(new Transformable($(".transformable")), $(".controls")[0]);

}).call(this);
